#% macro roll_button(name, title, dice) %#
<button type='roll'
        name='roll_#$ name $#'
        value='&{template:adz} {{title=#$ title $#}} {{dice=[[#$ dice $#]]}} {{result=[[(#$ dice $#)d6>5 - @{penalty}]]}} {{penalty=@{penalty}}}'></button>
#% endmacro %#

<div class="sheet-layout">

    <div class="sheet-basics">
        <label>Name</label><input type="text" name="attr_character_name" />
        <label>Erfolgsabzug</label><input type="number" step="1" name="attr_penalty" class="sheet-variable" value="0"/>
    </div>

    <div class="sheet-attributes">
        <h2>Attribute</h2>

        <div class="sheet-attributes-list">
            #% for abbreviation, name in attributes %#
            <label>#$ name $#</label>
            <input type="number" step="1" name="attr_#$ abbreviation $#" max="10"/>
#! TODO add a calc_ field with a stacked roll button like in the magic matrix !#
            #$ roll_button(abbreviation, name, '2*@{' + abbreviation + '}') $#
            #% endfor %#
        </div>
    </div>

    <div class="sheet-magic">
        <h2>Techniken & Magiebereiche</h2>

        <div class="sheet-magic-matrix">
            <div>#! label !#</div>
            <div>#! input !#</div>
            #% for technique in techniques %#
            <div class="vertical">
                <label>#$ technique $#</label>
                <input name="attr_#$ technique | lower $#" type="number" step="1" max="10"/>
            </div>
            #% endfor %#
            #% for domain in domains %#
            <label>#$ domain $#</label>
            <input type="number" step="1" name="attr_#$ domain | lower $#" max="10"/>
            #% for technique in techniques %#
            <div class="horizontal">
                <input name="attr_#$ domain | lower $#_#$ technique | lower $#" type="number" step="1" max="10" />
                <div class="stack">
                    <input name="attr_calc_total_#$ domain | lower $#_#$ technique | lower $#" class="number" readonly="true" />
                    #$ roll_button(domain | lower + '_' + technique | lower, domain + ' ' + technique | lower, '@{calc_total_' + domain | lower + '_' + technique | lower + '}') $#
                </div>
            </div>
            #% endfor %#
            #% endfor %#
        </div>
    </div>

    <rolltemplate class="sheet-rolltemplate-adz">
        <h1>{{title}}</h1>
        <p>{{result}} Erfolge mit <span class="plain">{{dice}}</span> Würfeln</p>
        <p class="note">Erfolgsabzug von {{penalty}} berücksichtigt.</p>
    </rolltemplate>

</div>


<script type="text/worker">

function parseIntegersIn(values) {
    for (const key of Object.keys(values)) {
        values[key] = parseInt(values[key]) || 0;
    }
}

var techniques = [
    #% for technique in techniques -%#
        "#$ technique | lower $#"
        #%- if not loop.last %#, #% endif -%#
    #%- endfor %#
];

var domains = [
    #% for domain in domains -%#
        "#$ domain | lower $#"
        #%- if not loop.last %#, #% endif -%#
    #%- endfor %#
];

for (const domain of domains) {
    addRowListener(domain);
    for (const technique of techniques) {
        addCellListener(domain, technique);
    }
}

for (const technique of techniques) {
    addColumnListener(technique);
}

function addCellListener(domain, technique) {
    var combination = domain + "_" + technique;
    on("change:" + combination, function() {
        console.log("cell change", domain, technique);
        getAttrs([domain, technique, combination], function(values) {
            parseIntegersIn(values);
            let result = {};
            calculate(values, domain, technique, result);
            setAttrs(result);
       });
    });
}

function addRowListener(domain) {
    var inputAttributes = [domain].concat(techniques, techniques.map(technique => domain + "_" + technique));
    on("sheet:opened change:" + domain, function() {
        console.log("row change", domain);
        getAttrs(inputAttributes, function(values) {
            parseIntegersIn(values);
            let result = {};
            for (const technique of techniques) {
                calculate(values, domain, technique, result);
            }
            setAttrs(result);
        });
    });
}

function addColumnListener(technique) {
    var inputAttributes = [technique].concat(domains, domains.map(domain => domain + "_" + technique));
    on("change:" + technique, function() {
        console.log("column change", technique);
        getAttrs(inputAttributes, function(values) {
            parseIntegersIn(values);
            let result = {};
            for (const domain of domains) {
                calculate(values, domain, technique, result);
            }
            setAttrs(result);
        });
    });
}

function calculate(values, domain, technique, result) {
    var total = "";
    if (values[domain] && values[technique]) {
        total = values[domain] + values[technique] + values[domain + "_" + technique];
    }
    result["calc_total_" + domain + "_" + technique] = total;
}
</script>
