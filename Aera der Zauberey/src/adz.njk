#% macro roll_button(name, title, dice, buttonLabel) %#
#$ roll_button_impl(name, title, dice, buttonLabel, true) $#
#% endmacro %#

#% macro roll_button_special(name, title, dice, buttonLabel) %#
#$ roll_button_impl(name, title, dice, buttonLabel, false) $#
#% endmacro %#

#% macro roll_button_impl(name, title, dice, buttonLabel, penaltyActive) %#
<button type='roll'
        name='roll_#$ name $#'
        value='&{template:adz} {{title=#$ title $#}} {{dice=[[#$ dice $#+0]]}} {{result=[[(#$ dice $#+0)d6>5cs>5cf<0#$ " - @{penalty}" if penaltyActive $#]]}}#$ " {{penalty=@{penalty}}}" if penaltyActive $#'
        #%- if buttonLabel %#
        class="labelled">
    <label>#$ buttonLabel $#</label>
        #%- else -%#
        >
        #%- endif %#
</button>
#% endmacro %#

<input class="sheet-character-name" type="hidden" name="attr_character_name" />
<div class="sheet-layout">

    <div class="sheet-basics">
        <label>Name</label>
        <input type="text" name="attr_character_name" />

        <label>Erfolgsabzug</label>
        <input type="number" step="1" name="attr_penalty" class="sheet-variable" value="0"/>

        <label>Sonstige Probe</label>
        #$ roll_button('custom-roll', '?{Titel|Probe}', '?{W端rfelanzahl|1}') $#

        <label>Sonstige Probe (ohne Abzug)</label>
        #$ roll_button_special('custom-roll-special', '?{Titel|Probe}', '?{W端rfelanzahl|1}') $#
    </div>

    <div class="sheet-notes">
        <label>Notizen</label>
        <textarea name="attr_character_notes"></textarea>
    </div>

    <div class="sheet-attributes">
        <h2>Attribute</h2>

        <div class="sheet-attributes-list">
            #% for abbreviation, name in attributes %#
            #$ roll_button(abbreviation, name, '@{calc_total_' + abbreviation + '}', name) $#
            <div class="horizontal">
                <input type="number" step="1" name="attr_#$ abbreviation $#" max="10"/>
                <div class="stack clickable-total">
                    <input name="attr_calc_total_#$ abbreviation $#" class="number" readonly="true" />
                    #$ roll_button(abbreviation, name, '@{calc_total_' + abbreviation + '}') $#
                </div>
            </div>
            #% endfor %#
        </div>
    </div>

    <div class="sheet-skills">
        <h2>Fertigkeiten</h2>

        <div class="skill-list">
            <fieldset class="repeating_skills">
              <input type="text" name="attr_name" />
              <select name="attr_attribute">
                <option value="-">-</option>
                #% for abbreviation, name in attributes %#
                <option value="#$ abbreviation $#">#$ abbreviation | upper $#</option>
                #% endfor %#
              </select>
              <input type="number" name="attr_value" />
              #! <button type='roll' name='roll_skill_@{name}' value='&{template:adz} {{name=@{name}}} {{erfolge=[[(@{value}+@{(@{repeating_skills_${x}_attribute})})d6>5 - @{abzug}]]}} {{abzug=@{abzug}}} {{wuerfel=99}}'></button> !#

                <div class="stack clickable-total">
                    <input name="attr_calc_total" class="number" readonly="true" />
                    #$ roll_button('@{name}', '@{name}', '@{calc_total}') $#
                </div>
            </fieldset>
            <button type="action" name="act_add-skills">Add Row</button>
        </div>
    </div>

    <div class="sheet-magic">
        <h2>Techniken & Magiebereiche</h2>

        <div class="sheet-magic-matrix">
            <div>#! label !#</div>
            <div>#! input !#</div>
            #% for technique in techniques %#
            <div class="vertical">
                <label>#$ technique $#</label>
                <input name="attr_#$ technique | lower $#" type="number" step="1" max="10"/>
            </div>
            #% endfor %#
            #% for domain in domains %#
            <label>#$ domain $#</label>
            <input type="number" step="1" name="attr_#$ domain | lower $#" max="10"/>
            #% for technique in techniques %#
            <div class="horizontal">
                <input name="attr_#$ domain | lower $#_#$ technique | lower $#" type="number" step="1" max="10" />
                <div class="stack clickable-total">
                    <input name="attr_calc_total_#$ domain | lower $#_#$ technique | lower $#" class="number" readonly="true" />
                    #$ roll_button(domain | lower + '_' + technique | lower, domain + ' ' + technique | lower, '@{calc_total_' + domain | lower + '_' + technique | lower + '}') $#
                </div>
            </div>
            #% endfor %#
            #% endfor %#
        </div>
    </div>

    <rolltemplate class="sheet-rolltemplate-adz">
        <h1>{{title}}</h1>
        <p>{{result}} Erfolge mit <span class="plain">{{dice}}</span> W端rfeln</p>
        {{#penalty}}
            <p class="note">Erfolgsabzug von {{penalty}} ber端cksichtigt.</p>
        {{/penalty}}
        {{^penalty}}
            <p class="note">Erfolgsabzug ignoriert.</p>
        {{/penalty}}
    </rolltemplate>

</div>


<script type="text/worker">

function getIntegersFrom(values) {
    let result = {};
    for (const key of Object.keys(values)) {
        result[key] = parseInt(values[key]) || 0;
    }
    return result;
}

var attributes = [
    #% for abbreviation, name in attributes %#
        "#$ abbreviation | lower $#"
        #%- if not loop.last %#, #% endif -%#
    #%- endfor %#
];

for (const abbreviation of attributes) {
    addAttributeListener(abbreviation);
}

function addAttributeListener(abbreviation) {
    on("sheet:opened change:" + abbreviation, function() {
        console.log("attribute change:", abbreviation);
        getAttrs([abbreviation], function(values) {
            let integers = getIntegersFrom(values);

            var total = "";
            if (integers[abbreviation]) {
                total = integers[abbreviation] * 2;
            }

            let result = {};
            result["calc_total_" + abbreviation] = total;
            setAttrs(result);
        });
    });
}

on("sheet:opened", function() {
    getSectionIDsOrdered("repeating_skills", function(ids) {
        skillIdOrder = ids;

        let valueIds = ids.map(id => "repeating_skills_" + id + "_value");
        let attributeIds = ids.map(id => "repeating_skills_" + id + "_attribute");
        var inputAttributes = valueIds.concat(attributeIds);
        bulkCalculateSkills(inputAttributes);

        var newAttributes = {};
        for (let i = ids.length; i < 16; i++) {
            var newId = generateRowID();
            newAttributes["repeating_skills_" + newId + "_attribute"] = "-";
        }
        setAttrs(newAttributes);
    });
});

var skillIdOrder = [];

on("clicked:add-skills", function() {
    var newAttributes = {};

    function add() {
        const id = generateRowID();
        newAttributes["repeating_skills_" + id + "_attribute"] = "-";
        skillIdOrder.push(id.toLowerCase());
    }
    add();
    add();

    setAttrs(newAttributes);
    console.debug("add-skills - new skillIdOrder:", skillIdOrder);
});

on("change:repeating_skills", function(eventInfo) {
    console.log("change:", eventInfo.sourceAttribute);
    if (/_(value|attribute)$/.test(eventInfo.sourceAttribute)) {
        console.debug("change", eventInfo);

        let inputAttributes = ["_value", "_attribute"].map(s => eventInfo.triggerName + s);
        bulkCalculateSkills(inputAttributes);
    }
});

on("change:_reporder:skills", function(eventInfo) {
    console.debug("change:_reporder:skills - eventInfo:", eventInfo);
    if (eventInfo.newValue) {
        skillIdOrder = eventInfo.newValue.toLowerCase().split(',');
        console.debug("change:_reporder:skills - new skillIdOrder:", skillIdOrder);
    } else {
        console.debug("change:_reporder:skills - event includes no ordering info");
        refreshSkillOrder();
    }
});

on("remove:repeating_skills", function(eventInfo) {
    console.debug("remove:repeating_skills - eventInfo:", eventInfo);

    const removedId = eventInfo.sourceAttribute.match(/^repeating_skills_([^_]+)$/)[1];
    console.info("removedId:", removedId);

    // Store last two skill IDs before updating skillIdOrder
    const lastTwoSkillIds = skillIdOrder.slice(-2);
    console.info("last 2 skills:", lastTwoSkillIds);

    getSectionIDsOrdered("repeating_skills", function(ids) {
        skillIdOrder = ids;
        console.debug("new skillIdOrder:", skillIdOrder);

        const count = ids.length;
        if (count < 16) {
            const newId = addBalancingSkillRow();
            console.info(`user removed a row; appending ${newId} to keep minimum row count`);
        } else if (count % 2 == 1) {
            if (lastTwoSkillIds.includes(removedId.toLowerCase())) {
                console.info(`user removed row ${removedId}, one of the last two rows. balance columns by removing the other row (if empty) or add a new one`);
                const otherRowId = lastTwoSkillIds.filter((lowerId) => lowerId != removedId.toLowerCase())[0];
                balanceSkillRowsAfterTailRemoval(otherRowId);
            } else {
                console.info("user removed non-tail row; appending a new one to keep columns balanced");
                addBalancingSkillRow();
            }
        }
    });
});

function balanceSkillRowsAfterTailRemoval(rowId) {
    const ids = ["name", "value"].map(suffix => "repeating_skills_" + rowId + "_" + suffix);
    getAttrs(ids, function(values) {
        const rowIsEmpty = Object.values(values).every((element) => element.length == 0);
        if (rowIsEmpty) {
            console.info(`other row ${rowId} is empty, too - removing.`);
            removeRepeatingRow(`repeating_skills_${rowId}`);
            refreshSkillOrder();
        } else {
            const newId = addBalancingSkillRow();
            console.info(`not removing the remaining non-empty row ${rowId}. keeping columns balanced by adding new row ${newId}.`);
        }
    });
}

function refreshSkillOrder() {
    getSectionIDsOrdered("repeating_skills", function(ids) {
        skillIdOrder = ids;
        console.debug("refreshSkillOrder - new skillIdOrder:", skillIdOrder);
    });
}

function addBalancingSkillRow() {
    var newId = generateRowID();
    console.debug(`addBalancingSkillRow - newId:${newId}`);
    var newAttributes = {};
    newAttributes[`repeating_skills_${newId}_attribute`] = "-";
    setAttrs(newAttributes);

    skillIdOrder.push(newId.toLowerCase());
    console.debug("addBalancingSkillRow - new skillIdOrder:", skillIdOrder);
    return newId;
}

function getSectionIDsOrdered(sectionName, callback) {
  'use strict';
  getAttrs([`_reporder_${sectionName}`], function (v) {
    getSectionIDs(sectionName, function (idArray) {
      let reporderArray = v[`_reporder_${sectionName}`] ? v[`_reporder_${sectionName}`].toLowerCase().split(',') : [],
        ids = [...new Set(reporderArray.filter(x => idArray.includes(x)).concat(idArray))];
      callback(ids);
    });
  });
};

function bulkCalculateSkills(inputAttributes) {
    getAttrs(inputAttributes.concat(attributes), function(values) {
        console.debug("bulkCalculateSkills with values", values);
        let result = {};
        for (const key of Object.keys(values).filter(key => key.endsWith("_value"))) {
            let prefix = key.replace("_value", "");
            calculateSkill(values, prefix, result);
        }
        console.log("bulk skill calculation result:", result);
        setAttrs(result);
    });
}

function calculateSkill(values, prefix, target) {
    let rawValue = values[prefix + "_value"];
    let value = parseInt(rawValue) || 0;

    let attributeAbbreviation = values[prefix + "_attribute"];

    let result = 0;
    if (attributeAbbreviation != "-") {
        let attributeRawValue = values[attributeAbbreviation];
        let attributeValue = parseInt(attributeRawValue) || 0;

        console.log("calculate " + prefix + " based on values: ", values);
        result = attributeValue + value;
    }
    target[prefix + "_calc_total"] = result;
}


var techniques = [
    #% for technique in techniques -%#
        "#$ technique | lower $#"
        #%- if not loop.last %#, #% endif -%#
    #%- endfor %#
];

var domains = [
    #% for domain in domains -%#
        "#$ domain | lower $#"
        #%- if not loop.last %#, #% endif -%#
    #%- endfor %#
];

for (const domain of domains) {
    addRowListener(domain);
    for (const technique of techniques) {
        addCellListener(domain, technique);
    }
}

for (const technique of techniques) {
    addColumnListener(technique);
}

function addCellListener(domain, technique) {
    var combination = domain + "_" + technique;
    on("change:" + combination, function() {
        console.log("cell change", domain, technique);
        getAttrs([domain, technique, combination], function(values) {
            let result = {};
            calculateMagicCell(values, domain, technique, result);
            setAttrs(result);
       });
    });
}

function addRowListener(domain) {
    var inputAttributes = [domain].concat(techniques, techniques.map(technique => domain + "_" + technique));
    on("sheet:opened change:" + domain, function() {
        console.log("row change", domain);
        getAttrs(inputAttributes, function(values) {
            let result = {};
            for (const technique of techniques) {
                calculateMagicCell(values, domain, technique, result);
            }
            setAttrs(result);
        });
    });
}

function addColumnListener(technique) {
    var inputAttributes = [technique].concat(domains, domains.map(domain => domain + "_" + technique));
    on("change:" + technique, function() {
        console.log("column change", technique);
        getAttrs(inputAttributes, function(values) {
            let result = {};
            for (const domain of domains) {
                calculateMagicCell(values, domain, technique, result);
            }
            setAttrs(result);
        });
    });
}

function calculateMagicCell(values, domain, technique, result) {
    let integers = getIntegersFrom(values);
    var total = "";
    if (integers[domain] && integers[technique]) {
        total = integers[domain] + integers[technique] + integers[domain + "_" + technique];
    }
    result["calc_total_" + domain + "_" + technique] = total;
}
</script>
